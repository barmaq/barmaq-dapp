name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: barmaq/barmaq-dapp
  K8S_NAMESPACE: app

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint

      - name: Run Python linting
        run: |
          # Проверка с помощью flake8
          flake8 . --count --max-line-length=120 --statistics

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install JS linting dependencies
        run: |
          npm install -g eslint
          npm init -y
          npm install --save-dev eslint

      - name: Run JavaScript linting
        run: |
          # Создаем базовую конфигурацию ESLint
          echo '{
            "env": {
              "browser": true,
              "es2021": true
            },
            "extends": "eslint:recommended",
            "parserOptions": {
              "ecmaVersion": "latest"
            }
          }' > .eslintrc.json
          
          # Проверяем JavaScript файлы
          eslint static/*.js || true

  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      # 1. Забираем код
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Логинимся в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 3. Собираем и пушим образ
      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure Kubernetes CLI
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      # 5. Деплоим в Kubernetes
      - name: Deploy to Cluster
        run: |
          # Проверяем подключение к кластеру
          echo "Checking cluster connection..."
          kubectl cluster-info --insecure-skip-tls-verify
          kubectl get nodes --insecure-skip-tls-verify
          
          # Обновляем image tag в deployment
          echo "Updating deployment image..."
          sed -i "s|${{ env.IMAGE_NAME }}:.*|${{ env.IMAGE_NAME }}:${{ github.sha }}|" k8s/deployment.yaml
          
          # Применяем манифесты без валидации
          echo "Applying manifests..."
          kubectl apply -f k8s/deployment.yaml -n ${{ env.K8S_NAMESPACE }} --insecure-skip-tls-verify --validate=false
          kubectl apply -f k8s/service.yaml -n ${{ env.K8S_NAMESPACE }} --insecure-skip-tls-verify --validate=false
          # Если есть Ingress:
          #kubectl apply -f k8s/ingress.yaml -n ${{ env.K8S_NAMESPACE }} --insecure-skip-tls-verify --validate=false

          # Проверяем поды
          echo "Checking pods..."
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} --insecure-skip-tls-verify
          
          # Ждем, пока деплоймент обновится
          echo "Waiting for deployment rollout..."
          kubectl rollout status deployment/barmaq-dapp -n ${{ env.K8S_NAMESPACE }} --insecure-skip-tls-verify --timeout=300s